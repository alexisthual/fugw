
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/00_basics/plot_1_dense.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_00_basics_plot_1_dense.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_00_basics_plot_1_dense.py:


Transport distributions using dense solvers
===========================================

In this example, we sample 2 toy distributions and compute
a dense fugw alignment between them.
Dense alignments are typically used when both aligned distributions
have less than 10k points.

.. GENERATED FROM PYTHON SOURCE LINES 11-19

.. code-block:: default


    import matplotlib.pyplot as plt
    import torch

    from fugw.mappings import FUGW
    from fugw.utils import init_mock_distribution
    from matplotlib.collections import LineCollection








.. GENERATED FROM PYTHON SOURCE LINES 21-28

.. code-block:: default

    torch.manual_seed(0)

    n_points_source = 50
    n_points_target = 40
    n_features_train = 2
    n_features_test = 2








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Let us generate random training data for the source and target distributions

.. GENERATED FROM PYTHON SOURCE LINES 30-38

.. code-block:: default

    _, source_features_train, source_geometry, source_embeddings = (
        init_mock_distribution(n_features_train, n_points_source)
    )
    _, target_features_train, target_geometry, target_embeddings = (
        init_mock_distribution(n_features_train, n_points_target)
    )
    source_features_train.shape





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/local/lib/python3.8/site-packages/torch/distributions/wishart.py:250: UserWarning: Singular sample detected.
      warnings.warn("Singular sample detected.")

    torch.Size([2, 50])



.. GENERATED FROM PYTHON SOURCE LINES 39-40

We can visualize the generated features:

.. GENERATED FROM PYTHON SOURCE LINES 40-49

.. code-block:: default

    fig = plt.figure(figsize=(4, 4))
    ax = fig.add_subplot()
    ax.set_title("Source and target features")
    ax.set_aspect("equal", "datalim")
    ax.scatter(source_features_train[0], source_features_train[1], label="Source")
    ax.scatter(target_features_train[0], target_features_train[1], label="Target")
    ax.legend()
    plt.show()




.. image-sg:: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_001.png
   :alt: Source and target features
   :srcset: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 50-51

And embeddings:

.. GENERATED FROM PYTHON SOURCE LINES 51-71

.. code-block:: default

    fig = plt.figure()
    ax = fig.add_subplot(projection="3d")
    ax.set_title("Source and target embeddings (ie geometries)")
    ax.scatter(
        source_embeddings[:, 0],
        source_embeddings[:, 1],
        source_embeddings[:, 2],
        s=15,
        label="Source",
    )
    ax.scatter(
        target_embeddings[:, 0],
        target_embeddings[:, 1],
        target_embeddings[:, 2],
        s=15,
        label="Target",
    )
    ax.legend()
    plt.show()




.. image-sg:: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_002.png
   :alt: Source and target embeddings (ie geometries)
   :srcset: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 72-73

Features and geometries should be normalized before calling the solver

.. GENERATED FROM PYTHON SOURCE LINES 73-83

.. code-block:: default

    source_features_train_normalized = source_features_train / torch.linalg.norm(
        source_features_train, dim=1
    ).reshape(-1, 1)
    target_features_train_normalized = target_features_train / torch.linalg.norm(
        target_features_train, dim=1
    ).reshape(-1, 1)

    source_geometry_normalized = source_geometry / source_geometry.max()
    target_geometry_normalized = target_geometry / target_geometry.max()








.. GENERATED FROM PYTHON SOURCE LINES 84-85

Let us define the optimization problem to solve

.. GENERATED FROM PYTHON SOURCE LINES 85-87

.. code-block:: default

    mapping = FUGW(alpha=0.5, eps=1e-4)








.. GENERATED FROM PYTHON SOURCE LINES 88-90

Now, we fit a transport plan between source and target distributions
using a sinkhorn solver

.. GENERATED FROM PYTHON SOURCE LINES 90-99

.. code-block:: default

    _ = mapping.fit(
        source_features_train_normalized,
        target_features_train_normalized,
        source_geometry=source_geometry_normalized,
        target_geometry=target_geometry_normalized,
        solver="sinkhorn",
        verbose=True,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none



    [21:09:17] BCD step 1/10   FUGW loss:      0.028000006452202797     dense.py:360
               (base)     0.02861664816737175 (entropic)                            


               BCD step 2/10   FUGW loss:      0.02218690887093544      dense.py:360
               (base)      0.022839007899165154 (entropic)                          


    [21:09:18] BCD step 3/10   FUGW loss:      0.021671757102012634     dense.py:360
               (base)     0.022318946197628975 (entropic)                           


               BCD step 4/10   FUGW loss:      0.020506752654910088     dense.py:360
               (base)     0.02114957384765148 (entropic)                            


    [21:09:19] BCD step 5/10   FUGW loss:      0.019838696345686913     dense.py:360
               (base)     0.020485999062657356 (entropic)                           


               BCD step 6/10   FUGW loss:      0.019212042912840843     dense.py:360
               (base)     0.019857466220855713 (entropic)                           


    [21:09:20] BCD step 7/10   FUGW loss:      0.018401773646473885     dense.py:360
               (base)     0.019050441682338715 (entropic)                           


               BCD step 8/10   FUGW loss:      0.018040582537651062     dense.py:360
               (base)     0.01869758404791355 (entropic)                            


               BCD step 9/10   FUGW loss:      0.017871618270874023     dense.py:360
               (base)     0.018533602356910706 (entropic)                           


    [21:09:21] BCD step 10/10  FUGW loss:      0.017864057794213295     dense.py:360
               (base)     0.01852637529373169 (entropic)                            




.. GENERATED FROM PYTHON SOURCE LINES 100-101

The transport plan can be accessed after the model has been fitted

.. GENERATED FROM PYTHON SOURCE LINES 101-104

.. code-block:: default

    pi = mapping.pi
    print(f"Transport plan's total mass: {pi.sum():.5f}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Transport plan's total mass: 0.99568




.. GENERATED FROM PYTHON SOURCE LINES 105-107

Here is the evolution of the FUGW loss during training,
with and without the entropic term:

.. GENERATED FROM PYTHON SOURCE LINES 107-117

.. code-block:: default


    fig, ax = plt.subplots(figsize=(4, 4))
    ax.set_title("Mapping training loss")
    ax.set_ylabel("Loss")
    ax.set_xlabel("BCD step")
    ax.plot(mapping.loss_steps, mapping.loss, label="FUGW loss")
    ax.plot(mapping.loss_steps, mapping.loss_entropic, label="FUGW entropic loss")
    ax.legend()
    plt.show()




.. image-sg:: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_003.png
   :alt: Mapping training loss
   :srcset: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 118-123

Using the computed mapping
--------------------------
The computed mapping is stored in ``mapping.pi`` as a ``torch.Tensor``.
In this example, the transport plan is small enough that we can display
it altogether.

.. GENERATED FROM PYTHON SOURCE LINES 123-132

.. code-block:: default


    fig, ax = plt.subplots(figsize=(4, 4))
    ax.set_title("Transport plan")
    ax.set_xlabel("target vertices")
    ax.set_ylabel("source vertices")
    im = plt.imshow(pi, cmap="viridis")
    plt.colorbar(im, ax=ax, shrink=0.8)
    plt.show()




.. image-sg:: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_004.png
   :alt: Transport plan
   :srcset: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 133-138

The previous figure of the transport plan tells us it is very sparse
and not very entropic.
Another informative way to look at the plan consists in checking
which points of the source and target distributions
were matched together in the feature space.

.. GENERATED FROM PYTHON SOURCE LINES 138-167

.. code-block:: default


    fig = plt.figure(figsize=(4, 4))
    ax = fig.add_subplot()
    ax.set_aspect("equal", "datalim")
    ax.set_title("Mapping\ndisplayed in feature space")

    # Draw lines between matched points
    indices = torch.cartesian_prod(
        torch.arange(n_points_source), torch.arange(n_points_target)
    )
    segments = torch.stack(
        [
            source_features_train[:, indices[:, 0]],
            target_features_train[:, indices[:, 1]],
        ]
    ).permute(2, 0, 1)
    pi_normalized = pi / pi.sum(dim=1).reshape(-1, 1)
    line_segments = LineCollection(
        segments, alpha=pi_normalized.flatten(), colors="black", lw=1, zorder=1
    )
    ax.add_collection(line_segments)

    # Draw distributions
    ax.scatter(source_features_train[0], source_features_train[1], label="Source")
    ax.scatter(target_features_train[0], target_features_train[1], label="Target")

    ax.legend()
    plt.show()




.. image-sg:: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_005.png
   :alt: Mapping displayed in feature space
   :srcset: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 168-170

Finally, the fitted model can transport unseen data
between source and target

.. GENERATED FROM PYTHON SOURCE LINES 170-175

.. code-block:: default

    source_features_test = torch.rand(n_features_test, n_points_source)
    target_features_test = torch.rand(n_features_test, n_points_target)
    transformed_data = mapping.transform(source_features_test)
    transformed_data.shape





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    torch.Size([2, 40])



.. GENERATED FROM PYTHON SOURCE LINES 176-178

.. code-block:: default

    assert transformed_data.shape == target_features_test.shape









.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.015 seconds)

**Estimated memory usage:**  256 MB


.. _sphx_glr_download_auto_examples_00_basics_plot_1_dense.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_1_dense.py <plot_1_dense.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_1_dense.ipynb <plot_1_dense.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
