
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/00_basics/plot_1_dense.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_00_basics_plot_1_dense.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_00_basics_plot_1_dense.py:


Transport distributions using dense solvers
===========================================

In this example, we sample 2 toy distributions and compute
a dense fugw alignment between them.
Dense alignments are typically used when both aligned distributions
have less than 10k points.

.. GENERATED FROM PYTHON SOURCE LINES 11-20

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np
    import torch

    from fugw.mappings import FUGW
    from fugw.mappings.utils import init_mock_distribution
    from matplotlib.collections import LineCollection








.. GENERATED FROM PYTHON SOURCE LINES 22-30

.. code-block:: default

    np.random.seed(2)
    torch.manual_seed(2)

    n_points_source = 50
    n_points_target = 40
    n_features_train = 2
    n_features_test = 2








.. GENERATED FROM PYTHON SOURCE LINES 31-32

Let us generate random training data for the source and target distributions

.. GENERATED FROM PYTHON SOURCE LINES 32-40

.. code-block:: default

    _, source_features_train, source_geometry, source_embeddings = (
        init_mock_distribution(n_features_train, n_points_source)
    )
    _, target_features_train, target_geometry, target_embeddings = (
        init_mock_distribution(n_features_train, n_points_target)
    )
    source_features_train.shape





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    torch.Size([2, 50])



.. GENERATED FROM PYTHON SOURCE LINES 41-42

We can visualize the generated features:

.. GENERATED FROM PYTHON SOURCE LINES 42-51

.. code-block:: default

    fig = plt.figure(figsize=(4, 4))
    ax = fig.add_subplot()
    ax.set_title("Source and target features")
    ax.set_aspect("equal", "datalim")
    ax.scatter(source_features_train[0], source_features_train[1], label="Source")
    ax.scatter(target_features_train[0], target_features_train[1], label="Target")
    ax.legend()
    plt.show()




.. image-sg:: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_001.png
   :alt: Source and target features
   :srcset: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 52-53

And embeddings:

.. GENERATED FROM PYTHON SOURCE LINES 53-73

.. code-block:: default

    fig = plt.figure()
    ax = fig.add_subplot(projection="3d")
    ax.set_title("Source and target embeddings (ie geometries)")
    ax.scatter(
        source_embeddings[:, 0],
        source_embeddings[:, 1],
        source_embeddings[:, 2],
        s=15,
        label="Source",
    )
    ax.scatter(
        target_embeddings[:, 0],
        target_embeddings[:, 1],
        target_embeddings[:, 2],
        s=15,
        label="Target",
    )
    ax.legend()
    plt.show()




.. image-sg:: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_002.png
   :alt: Source and target embeddings (ie geometries)
   :srcset: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 74-75

Features and geometries should be normalized before calling the solver

.. GENERATED FROM PYTHON SOURCE LINES 75-85

.. code-block:: default

    source_features_train_normalized = source_features_train / torch.linalg.norm(
        source_features_train, dim=1
    ).reshape(-1, 1)
    target_features_train_normalized = target_features_train / torch.linalg.norm(
        target_features_train, dim=1
    ).reshape(-1, 1)

    source_geometry_normalized = source_geometry / source_geometry.max()
    target_geometry_normalized = target_geometry / target_geometry.max()








.. GENERATED FROM PYTHON SOURCE LINES 86-87

Let us define the optimization problem to solve

.. GENERATED FROM PYTHON SOURCE LINES 87-89

.. code-block:: default

    mapping = FUGW(alpha=0.5, eps=1e-4)








.. GENERATED FROM PYTHON SOURCE LINES 90-92

Now, we fit a transport plan between source and target distributions
using a sinkhorn solver

.. GENERATED FROM PYTHON SOURCE LINES 92-101

.. code-block:: default

    _ = mapping.fit(
        source_features_train_normalized,
        target_features_train_normalized,
        source_geometry=source_geometry_normalized,
        target_geometry=target_geometry_normalized,
        uot_solver="sinkhorn",
        verbose=True,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none



    [11:03:11] BCD step 1/10   FUGW loss:      0.07106098532676697      dense.py:342
               (base)      0.0716898962855339 (entropic)                            


    [11:03:12] BCD step 2/10   FUGW loss:      0.06062595546245575      dense.py:342
               (base)      0.06126530095934868 (entropic)                           


               BCD step 3/10   FUGW loss:      0.05847756192088127      dense.py:342
               (base)      0.05912858247756958 (entropic)                           


               BCD step 4/10   FUGW loss:      0.0584559366106987       dense.py:342
               (base)       0.059106577187776566 (entropic)                         


    [11:03:13] BCD step 5/10   FUGW loss:      0.05841211974620819      dense.py:342
               (base)      0.059064075350761414 (entropic)                          


               BCD step 6/10   FUGW loss:      0.0584060437977314       dense.py:342
               (base)       0.059058528393507004 (entropic)                         


    [11:03:14] BCD step 7/10   FUGW loss:      0.058397069573402405     dense.py:342
               (base)     0.05904938280582428 (entropic)                            


               BCD step 8/10   FUGW loss:      0.058390866965055466     dense.py:342
               (base)     0.05904326215386391 (entropic)                            


    [11:03:15] BCD step 9/10   FUGW loss:      0.05838455259799957      dense.py:342
               (base)      0.05903756245970726 (entropic)                           


               BCD step 10/10  FUGW loss:      0.05838431790471077      dense.py:342
               (base)      0.059037402272224426 (entropic)                          




.. GENERATED FROM PYTHON SOURCE LINES 102-103

The transport plan can be accessed after the model has been fitted

.. GENERATED FROM PYTHON SOURCE LINES 103-106

.. code-block:: default

    pi = mapping.pi
    print(f"Transport plan's total mass: {pi.sum():.5f}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Transport plan's total mass: 0.99099




.. GENERATED FROM PYTHON SOURCE LINES 107-109

Here is the evolution of the FUGW loss during training,
with and without the entropic term:

.. GENERATED FROM PYTHON SOURCE LINES 109-119

.. code-block:: default


    fig, ax = plt.subplots(figsize=(4, 4))
    ax.set_title("Mapping training loss")
    ax.set_ylabel("Loss")
    ax.set_xlabel("BCD step")
    ax.plot(mapping.loss_steps, mapping.loss_, label="FUGW loss")
    ax.plot(mapping.loss_steps, mapping.loss_ent, label="FUGW entropic loss")
    ax.legend()
    plt.show()




.. image-sg:: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_003.png
   :alt: Mapping training loss
   :srcset: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 120-125

Using the computed mapping
--------------------------
The computed mapping is stored in ``mapping.pi`` as a ``torch.Tensor``.
In this example, the transport plan is small enough that we can display
it altogether.

.. GENERATED FROM PYTHON SOURCE LINES 125-134

.. code-block:: default


    fig, ax = plt.subplots(figsize=(4, 4))
    ax.set_title("Transport plan")
    ax.set_xlabel("target vertices")
    ax.set_ylabel("source vertices")
    im = plt.imshow(pi, cmap="viridis")
    plt.colorbar(im, ax=ax, shrink=0.8)
    plt.show()




.. image-sg:: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_004.png
   :alt: Transport plan
   :srcset: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 135-140

The previous figure of the transport plan tells us it is very sparse
and not very entropic.
Another informative way to look at the plan consists in checking
which points of the source and target distributions
were matched together in the feature space.

.. GENERATED FROM PYTHON SOURCE LINES 140-169

.. code-block:: default


    fig = plt.figure(figsize=(4, 4))
    ax = fig.add_subplot()
    ax.set_aspect("equal", "datalim")
    ax.set_title("Mapping\ndisplayed in feature space")

    # Draw lines between matched points
    indices = torch.cartesian_prod(
        torch.arange(n_points_source), torch.arange(n_points_target)
    )
    segments = torch.stack(
        [
            source_features_train[:, indices[:, 0]],
            target_features_train[:, indices[:, 1]],
        ]
    ).permute(2, 0, 1)
    pi_normalized = pi / pi.sum(dim=1).reshape(-1, 1)
    line_segments = LineCollection(
        segments, alpha=pi_normalized.flatten(), colors="black", lw=1, zorder=1
    )
    ax.add_collection(line_segments)

    # Draw distributions
    ax.scatter(source_features_train[0], source_features_train[1], label="Source")
    ax.scatter(target_features_train[0], target_features_train[1], label="Target")

    ax.legend()
    plt.show()




.. image-sg:: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_005.png
   :alt: Mapping displayed in feature space
   :srcset: /auto_examples/00_basics/images/sphx_glr_plot_1_dense_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 170-172

Finally, the fitted model can transport unseen data
between source and target

.. GENERATED FROM PYTHON SOURCE LINES 172-177

.. code-block:: default

    source_features_test = torch.rand(n_features_test, n_points_source)
    target_features_test = torch.rand(n_features_test, n_points_target)
    transformed_data = mapping.transform(source_features_test)
    transformed_data.shape





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    torch.Size([2, 40])



.. GENERATED FROM PYTHON SOURCE LINES 178-179

.. code-block:: default

    assert transformed_data.shape == target_features_test.shape








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.348 seconds)

**Estimated memory usage:**  271 MB


.. _sphx_glr_download_auto_examples_00_basics_plot_1_dense.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_1_dense.py <plot_1_dense.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_1_dense.ipynb <plot_1_dense.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
