
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/00_basics/plot_2_1_lmds.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_00_basics_plot_2_1_lmds.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_00_basics_plot_2_1_lmds.py:


Generate embeddings from mesh
=============================

In this example, we show how to derive an embedding
which approximates the kernel matrix of geodesic distances
on a given mesh.
This technique is useful when trying to align distributions
with a large number of points. Indeed, the kernel matrix
of pairwise distances won't fit in memory, but an embedding
computed in the right dimension can probably estimate it.

.. GENERATED FROM PYTHON SOURCE LINES 14-23

.. code-block:: default


    import gdist
    import matplotlib.pyplot as plt
    import numpy as np
    import torch

    from fugw.scripts import lmds
    from nilearn import datasets, surface








.. GENERATED FROM PYTHON SOURCE LINES 25-28

Here, we will compute the exact geodesic distances from
each vertex to a random sample of ``n_landmarks`` vertices.
The derived embedding will be in dimension ``k``.

.. GENERATED FROM PYTHON SOURCE LINES 28-33

.. code-block:: default

    torch.manual_seed(0)

    n_landmarks = 100
    k = 3








.. GENERATED FROM PYTHON SOURCE LINES 34-35

Let us load a pre-computed mesh and have a look at it first

.. GENERATED FROM PYTHON SOURCE LINES 35-39

.. code-block:: default

    fsaverage3 = datasets.fetch_surf_fsaverage(mesh="fsaverage3")
    coordinates, triangles = surface.load_surf_mesh(fsaverage3.sphere_left)
    coordinates.shape





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Dataset created in /github/home/nilearn_data/fsaverage3

    Downloading data from https://osf.io/asvjk/download ...
     ...done. (2 seconds, 0 min)
    Extracting data from /github/home/nilearn_data/fsaverage3/b9ce491b47822c5b4950eeeb75d15a92/download..... done.

    (642, 3)



.. GENERATED FROM PYTHON SOURCE LINES 40-50

.. code-block:: default

    fig = plt.figure(figsize=(5, 5))
    ax = fig.add_subplot(projection="3d")
    ax.plot_trisurf(
        coordinates[:, 0],
        coordinates[:, 1],
        coordinates[:, 2],
        triangles=triangles,
    )
    plt.show()




.. image-sg:: /auto_examples/00_basics/images/sphx_glr_plot_2_1_lmds_001.png
   :alt: plot 2 1 lmds
   :srcset: /auto_examples/00_basics/images/sphx_glr_plot_2_1_lmds_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 51-52

Now, let's compute the embedding! This computation is easy to parallelize.

.. GENERATED FROM PYTHON SOURCE LINES 52-61

.. code-block:: default

    X = lmds.compute_lmds(
        coordinates,
        triangles,
        n_landmarks=n_landmarks,
        k=k,
        n_jobs=2,
        verbose=True,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      100% Geodesic_distances for landmarks ━━━━━━━━━━━━━━ 100/100 0:00:02 < 0:00:00
    /github/workspace/src/fugw/scripts/lmds.py:161: UserWarning:

    A might not be centered (1.8740234375 > 0.001)





.. GENERATED FROM PYTHON SOURCE LINES 62-63

It should have the correct size

.. GENERATED FROM PYTHON SOURCE LINES 63-65

.. code-block:: default

    assert X.shape == (coordinates.shape[0], k)








.. GENERATED FROM PYTHON SOURCE LINES 66-67

We can actually have a peek at the computed embedding:

.. GENERATED FROM PYTHON SOURCE LINES 67-79

.. code-block:: default


    fig = plt.figure(figsize=(5, 5))
    ax = fig.add_subplot(projection="3d")
    ax.set_title("Embedding approximating kernel matrix")
    ax.scatter(
        X[:, 0],
        X[:, 1],
        X[:, 2],
        s=15,
    )
    plt.show()




.. image-sg:: /auto_examples/00_basics/images/sphx_glr_plot_2_1_lmds_002.png
   :alt: Embedding approximating kernel matrix
   :srcset: /auto_examples/00_basics/images/sphx_glr_plot_2_1_lmds_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 80-83

Finally, we check that the exact matrix of geodesic distances
between pairs of vertices of the mesh
is well approximated by the kernel matrix derived from the embeddings:

.. GENERATED FROM PYTHON SOURCE LINES 83-102

.. code-block:: default


    fig = plt.figure(figsize=(5, 10))

    ax = fig.add_subplot(211)
    ax.set_title("True matrix of geodesic distances")
    true_kernel_matrix = gdist.local_gdist_matrix(
        coordinates.astype(np.float64),
        triangles.astype(np.int32),
    ).toarray()
    im = ax.imshow(true_kernel_matrix)
    plt.colorbar(im, ax=ax, shrink=0.9)

    ax = fig.add_subplot(212)
    ax.set_title("Approximated matrix of geodesic distances")
    approximated_kernel_matrix = torch.cdist(X, X)
    im = ax.imshow(approximated_kernel_matrix)
    plt.colorbar(im, ax=ax, shrink=0.9)

    plt.show()



.. image-sg:: /auto_examples/00_basics/images/sphx_glr_plot_2_1_lmds_003.png
   :alt: True matrix of geodesic distances, Approximated matrix of geodesic distances
   :srcset: /auto_examples/00_basics/images/sphx_glr_plot_2_1_lmds_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.601 seconds)

**Estimated memory usage:**  159 MB


.. _sphx_glr_download_auto_examples_00_basics_plot_2_1_lmds.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_2_1_lmds.py <plot_2_1_lmds.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_2_1_lmds.ipynb <plot_2_1_lmds.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
