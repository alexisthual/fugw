
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_volumetric_alignment/plot_2_aligning_high_res_volumes.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_volumetric_alignment_plot_2_aligning_high_res_volumes.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_volumetric_alignment_plot_2_aligning_high_res_volumes.py:


===================================================================
Align low-resolution brain volumes of 2 individuals with fMRI data
===================================================================

In this example, we align 2 low-resolution brain volumes
using 4 fMRI feature maps (z-score contrast maps).

.. GENERATED FROM PYTHON SOURCE LINES 10-20

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt

    from nilearn import datasets, image
    from fugw.mappings import FUGW, FUGWSparse
    from fugw.scripts import coarse_to_fine, lmds

    plt.rcParams["figure.dpi"] = 300








.. GENERATED FROM PYTHON SOURCE LINES 22-23

We first fetch 5 contrasts for each subject from the localizer dataset.

.. GENERATED FROM PYTHON SOURCE LINES 23-46

.. code-block:: default

    n_subjects = 2

    contrasts = [
        "sentence reading vs checkerboard",
        "sentence listening",
        "calculation vs sentences",
        "left vs right button press",
        "checkerboard",
    ]
    n_training_contrasts = 4

    brain_data = datasets.fetch_localizer_contrasts(
        contrasts,
        n_subjects=n_subjects,
        get_anats=True,
    )

    source_imgs_paths = brain_data["cmaps"][0 : len(contrasts)]
    target_imgs_paths = brain_data["cmaps"][len(contrasts) : 2 * len(contrasts)]

    source_im = image.load_img(source_imgs_paths)
    target_im = image.load_img(target_imgs_paths)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/local/lib/python3.8/site-packages/nilearn/datasets/func.py:893: UserWarning:

    `legacy_format` will default to `False` in release 0.11. Dataset fetchers will then return pandas dataframes by default instead of recarrays.





.. GENERATED FROM PYTHON SOURCE LINES 47-48

Let's use a geometry of 7633 voxels.

.. GENERATED FROM PYTHON SOURCE LINES 48-77

.. code-block:: default

    SCALE_FACTOR = 2

    source_maps = np.nan_to_num(
        source_im.get_fdata()[::SCALE_FACTOR, ::SCALE_FACTOR, ::SCALE_FACTOR]
    )
    target_maps = np.nan_to_num(
        target_im.get_fdata()[::SCALE_FACTOR, ::SCALE_FACTOR, ::SCALE_FACTOR]
    )

    segmentation_fine = np.logical_not(np.isnan(source_im.get_fdata()[:, :, :, 0]))
    segmentation_coarse = segmentation_fine[
        ::SCALE_FACTOR, ::SCALE_FACTOR, ::SCALE_FACTOR
    ]
    coordinates = np.array(np.nonzero(segmentation_coarse)).T

    source_features = source_maps[
        coordinates[:, 0], coordinates[:, 1], coordinates[:, 2]
    ].T
    target_features = target_maps[
        coordinates[:, 0], coordinates[:, 1], coordinates[:, 2]
    ].T

    fig = plt.figure()
    ax = fig.add_subplot(projection="3d")
    ax.scatter(coordinates[:, 0], coordinates[:, 1], coordinates[:, 2], marker="o")
    ax.view_init(10, 135)
    ax.set_axis_off()
    plt.show()




.. image-sg:: /auto_examples/02_volumetric_alignment/images/sphx_glr_plot_2_aligning_high_res_volumes_001.png
   :alt: plot 2 aligning high res volumes
   :srcset: /auto_examples/02_volumetric_alignment/images/sphx_glr_plot_2_aligning_high_res_volumes_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 78-79

We then compute the distance matrix between voxel coordinates.

.. GENERATED FROM PYTHON SOURCE LINES 79-87

.. code-block:: default

    source_geometry_embeddings = lmds.compute_lmds_volume(
        segmentation_coarse
    ).nan_to_num()
    target_geometry_embeddings = source_geometry_embeddings.clone()

    # Show the embedding shape
    print(source_geometry_embeddings.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    torch.Size([7633, 3])




.. GENERATED FROM PYTHON SOURCE LINES 88-90

In order to avoid numerical errors when fitting the mapping, we normalize
both the features and the geometry.

.. GENERATED FROM PYTHON SOURCE LINES 90-104

.. code-block:: default

    source_features_normalized = source_features / np.linalg.norm(
        source_features, axis=1
    ).reshape(-1, 1)
    target_features_normalized = target_features / np.linalg.norm(
        target_features, axis=1
    ).reshape(-1, 1)

    source_embeddings_normalized, source_distance_max = (
        coarse_to_fine.random_normalizing(source_geometry_embeddings)
    )
    target_embeddings_normalized, target_distance_max = (
        coarse_to_fine.random_normalizing(target_geometry_embeddings)
    )








.. GENERATED FROM PYTHON SOURCE LINES 105-106

We now fit the mapping using the sinkhorn solver and 3 BCD iterations.

.. GENERATED FROM PYTHON SOURCE LINES 106-126

.. code-block:: default

    alpha_coarse = 0.5
    rho_coarse = 1
    eps_coarse = 1e-4
    coarse_mapping = FUGW(alpha=alpha_coarse, rho=rho_coarse, eps=eps_coarse)
    coarse_mapping_solver = "mm"
    coarse_mapping_solver_params = {
        "nits_bcd": 5,
        "tol_uot": 1e-10,
    }

    alpha_fine = 0.5
    rho_fine = 1
    eps_fine = 1e-4
    fine_mapping = FUGWSparse(alpha=alpha_fine, rho=rho_fine, eps=eps_fine)
    fine_mapping_solver = "mm"
    fine_mapping_solver_params = {
        "nits_bcd": 3,
        "tol_uot": 1e-10,
    }








.. GENERATED FROM PYTHON SOURCE LINES 127-128

Let's subsample the vertices.

.. GENERATED FROM PYTHON SOURCE LINES 128-139

.. code-block:: default

    source_sample = coarse_to_fine.sample_volume_uniformly(
        segmentation_coarse,
        embeddings=source_geometry_embeddings,
        n_samples=1000,
    )
    target_sample = coarse_to_fine.sample_volume_uniformly(
        segmentation_coarse,
        embeddings=target_geometry_embeddings,
        n_samples=1000,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/local/lib/python3.8/site-packages/sklearn/cluster/_agglomerative.py:282: UserWarning:

    the number of connected components of the connectivity matrix is 3 > 1. Completing it to avoid stopping the tree early.

    /usr/local/lib/python3.8/site-packages/sklearn/cluster/_agglomerative.py:282: UserWarning:

    the number of connected components of the connectivity matrix is 3 > 1. Completing it to avoid stopping the tree early.





.. GENERATED FROM PYTHON SOURCE LINES 140-141

Train both the coarse and the fine mapping.

.. GENERATED FROM PYTHON SOURCE LINES 141-166

.. code-block:: default

    coarse_to_fine.fit(
        # Source and target's features and embeddings
        source_features=source_features_normalized[:n_training_contrasts, :],
        target_features=target_features_normalized[:n_training_contrasts, :],
        source_geometry_embeddings=source_embeddings_normalized,
        target_geometry_embeddings=target_embeddings_normalized,
        # Parametrize step 1 (coarse alignment between source and target)
        source_sample=source_sample,
        target_sample=target_sample,
        coarse_mapping=coarse_mapping,
        coarse_mapping_solver=coarse_mapping_solver,
        coarse_mapping_solver_params=coarse_mapping_solver_params,
        # Parametrize step 2 (selection of pairs of indices present in
        # fine-grained's sparsity mask)
        coarse_pairs_selection_method="topk",
        source_selection_radius=3 / source_distance_max,
        target_selection_radius=3 / target_distance_max,
        # Parametrize step 3 (fine-grained alignment)
        fine_mapping=fine_mapping,
        fine_mapping_solver=fine_mapping_solver,
        fine_mapping_solver_params=fine_mapping_solver_params,
        # Misc
        verbose=True,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none



    [19:10:21] BCD step 1/5    FUGW loss:      0.024476811289787292     dense.py:464


    [19:10:32] BCD step 2/5    FUGW loss:      0.01855831779539585      dense.py:464


    [19:10:42] BCD step 3/5    FUGW loss:      0.012353211641311646     dense.py:464


    [19:10:53] BCD step 4/5    FUGW loss:      0.005771104712039232     dense.py:464


    [19:11:10] BCD step 5/5    FUGW loss:      0.003976800944656134     dense.py:464


    [19:13:26] BCD step 1/3    FUGW loss:      0.00429160799831152     sparse.py:512


    [19:15:41] BCD step 2/3    FUGW loss:      0.00320232380181551     sparse.py:512


    [19:17:53] BCD step 3/3    FUGW loss:      0.0028234650380909443   sparse.py:512

    (tensor([6131, 1014, 4663, 7041, 5816, 7544,  499, 3353, 7189, 5401, 2610, 1091,
             651, 6805,  639, 3049, 1995, 1838, 2060, 1171,  409, 1898, 1376,  487,
            3907, 3897,  881, 6491, 3648,  969, 1936, 6644, 6319, 5345, 6360, 5271,
            7000, 4518, 3228, 6566, 2212, 6433,  902, 7013, 5205, 7043, 2910, 3473,
            1085, 6231,  948,  834, 6310, 4076, 1342, 3547, 5047, 7427, 1199, 6264,
            5356, 7191, 6278,   27, 6183, 1803,   26, 4373, 5850,   45, 7425,   89,
            4050, 2686, 4014, 4358, 3595, 1348,  521, 3974, 6436, 4021, 4888, 4891,
            5171,   39, 1131, 7546,  242, 3884, 2784, 5595, 3889,  781,    3,  119,
            1324, 6337, 6515, 6486, 2421, 5294,  745, 5181, 4039, 5444, 6589, 2684,
            3241,  972, 2052, 2000, 4145, 5855, 4132, 1883, 3745, 7609, 2978, 4912,
            7263,  733, 1431, 2119, 2048, 2592, 1562, 4052, 7421, 6836, 3678, 2169,
            4983, 4686, 4025, 6882, 1078, 3788, 2794, 4763, 3359,  971, 2071,  470,
            1763, 6110, 4472,  857, 5491,  551, 3650, 2024, 4183, 7223, 2005, 2496,
            4989, 4579, 2800,  879, 1499, 6284, 3669, 1335, 5546, 2893, 2788, 4346,
            6099,  913, 2697, 3069, 5011, 6270, 6995, 2844, 5016, 5216, 2804, 2993,
            4343, 5698, 3755, 1612, 3330, 3849,   82,  859, 2793, 2235,  203, 4179,
            2012,  983, 4277, 5134, 5426, 5609,  128, 2695, 7407, 5324, 6572,  673,
            3196,   34, 6891, 2942, 4001, 4830, 3959, 7337, 3859, 6832, 2530,  828,
            6338, 6243, 4698, 5361, 2749,  909, 6603, 4906, 4651, 1641, 4493,  800,
            2126, 7156, 3385, 3336, 1124, 4806, 7254, 3108, 7133,  309, 4784, 1415,
            4335, 4853,  585, 3534,  434,  456, 3312, 3087, 2999, 5515, 7074, 3759,
            5570, 3847,  931, 3289, 7463, 2214, 6091, 3275, 2489, 3656, 6130, 1892,
            6373, 4124, 6089, 7564, 3298, 4705, 6808, 2264,  636, 2564, 1219, 6660,
            1071, 7583, 1106, 3020, 4875, 2747, 1527, 5516, 7035, 5520, 4761, 5956,
            6168, 6204, 4629, 7442,  753,  347, 5081, 6079, 2385, 1717, 6036, 3240,
            5137, 1026, 1845, 1914, 6406, 6825, 7460, 1935, 6796, 5477, 6146, 4859,
            7576, 5596, 6635, 2997,  480, 3773, 3333, 5553, 6391, 4510, 6318, 5667,
            4267, 4313, 6973, 3614, 4221, 3174, 1163, 5845, 6546, 4234, 5944, 1161,
            7389, 2992, 1654, 3488, 2849, 4398, 4758, 3432, 5224, 3920, 2467, 6530,
            2975, 6865, 5107, 1086, 6645, 2897,  210,  615, 2514, 3831,  933, 7341,
            6741, 6488,  588, 4316,  413, 3466, 2854, 1605, 6116,  259, 5228, 3517,
            1916, 1079,  954, 6628, 3025, 7238, 2547, 1310, 3937, 6870, 7143, 7619,
            7127, 6916, 7482, 5306, 3036, 6248, 5795, 6423, 6333, 1952, 1665, 4249,
            1019, 2305, 6600, 4082, 7100, 4181, 2980, 7500, 6630, 7383, 2007,  775,
            7323, 4745, 3250, 2263, 1204, 4931,  570, 7419, 3142,    4, 1799, 3552,
            7604, 6059, 3187, 3340, 2223, 3841,  111, 3209, 4091, 2316, 4873,  541,
            6187, 3616, 3235, 4883,  868, 2186, 1937, 4624,  718, 1461, 3476,  482,
            1897, 5618,  704, 5141, 6581, 5749, 5995, 3807, 4961, 5117, 4008, 5840,
            5103, 5999,  224, 7497,  148,  159, 6076, 5542,  815, 7077, 4000,  504,
            3721, 2680, 3361,  661, 2365, 5202, 3489, 6456,   92, 2308, 3928, 5927,
            2738, 5254, 7554, 3176,  922,  440, 4973, 1306, 1143, 1033, 2520,  719,
            3804, 4437, 1139, 4199, 5249, 1748, 6160, 4487, 5952, 6560, 1502, 1548,
            7275, 3129, 4045,  926, 2717, 1626, 4539,  897, 1099, 2615, 2289, 6002,
            6687, 4499, 2393, 2203,  145, 2770, 2851,  906, 3350, 6889, 3483, 1000,
             701,  573, 1867, 3760, 6282, 3146, 2065, 1787, 7078, 7071, 5902, 2164,
             244, 5050, 2861,  364, 5021, 4594, 5802, 6988, 6485, 5094, 1447,  519,
            1908, 2439, 3560, 1625, 1927, 2462, 1603, 5536,  262, 5580, 4057, 4135,
            2240,  401, 4417, 1031, 2768, 5097, 1552, 3813, 7480, 6947, 4368, 7286,
            2352, 7011, 3188,  900, 4536, 3903, 6537, 4913, 5394, 3886, 6907, 3375,
            7058, 7432, 6307,  116, 2215, 6261, 6834, 5474, 1671, 2437, 7129, 3639,
            1365,  734, 5746, 2222, 1840,  233, 2965, 2512, 6448, 5253, 7439, 7626,
            5812, 2600, 6133, 5259, 6465, 6780, 1836, 4444, 6411, 1259, 1664, 4161,
            7368,  945, 2988, 2633, 6953, 1454, 6748, 7099, 7300, 3478, 1784, 6733,
            3704, 5264, 3896, 5897, 6009, 5772, 3301, 7474, 6871, 5730, 5533, 1873,
            3548, 6699, 4630,  818, 6737, 7470, 6232, 6312, 3677, 7295, 2618, 6478,
            7579,  247, 5843, 6557, 5884, 2502, 7032, 5127, 2162,  860, 1792, 4219,
            6606, 2847, 5286,  192, 3133, 4106, 3151, 3635, 4703, 7537, 1228, 7347,
            1485, 1100, 4405, 5775, 6656, 6276, 6975, 5945, 1477, 1684, 2930, 5367,
            2042,  266, 4653, 2121, 4868, 3930, 7284, 6782, 5860, 5947, 2558, 2927,
            2579, 4644, 6066, 3825, 1674, 2195, 4708, 2072, 1369, 1600, 4355, 5292,
            3337, 1962, 4380, 5031, 3400,  333, 2839, 1159, 4900, 1305, 3537, 2391,
            5505,  671, 3622, 4150, 5577, 3876,  632, 4393, 4537, 6775, 1409, 6719,
            2902, 2865, 6190,  891, 5838, 6613, 1852, 7007, 3947, 1283, 4033,  957,
               9, 3521,  174, 4158, 5173,  700, 4112, 1167, 2915, 1531, 3728, 1192,
            5732, 5299, 7547, 2623, 4565, 2761, 3244, 6969, 5130, 3654, 6362, 7196,
            4114, 5251, 3169, 4168, 3842, 3992, 4401,  193, 5735, 3964, 2639, 6126,
            6472, 1215, 7355,  219, 2445, 2099,  571, 1998, 1066, 5798, 5870, 4666,
            6057, 6384, 5039, 4476, 2458,  599,   99, 5000,  692, 3206, 3441, 2742,
            7612, 3852, 5218, 4485,  711, 1413,  830,  335, 3462, 7594, 3723, 2170,
            6476, 3580, 1762, 3233, 7279,  126, 1333, 6226, 4542, 5920, 5769, 3701,
            4719, 2878, 5853, 5551, 2299, 2108,  511, 3089, 7040, 4331, 1362, 1419,
            6122, 5144, 6398, 5892,  727, 3389, 7560, 3883, 6196, 1621, 3422, 5063,
            3890, 5691, 1508, 1678, 7200, 5200,  978, 6691, 5988,  171, 7170,   59,
            2932,  187, 1564,  212, 4110, 3139, 5197, 3386, 3632, 4407, 1693, 4926,
            7505, 5159,  821, 5808, 1973, 6238, 1943, 4196, 5115, 6919, 6219, 4559,
            7429, 1388, 4514, 1107,   37, 4614, 3118, 3609, 3292, 3270, 6387, 7019,
            1933, 1303, 1657, 2925, 6043, 2826, 4482,  123, 6728, 7142, 2256,  560,
             643, 6912, 2658, 2651, 6212, 1052, 6341, 3278, 7063, 1760, 5428, 6494,
            5630, 2572, 3602, 7514, 7361, 2184, 2663, 1073, 4146, 6169,  612, 4308,
            5877, 1567, 7402, 4513,  998, 6109, 1309, 6184, 5206, 4385, 5467, 7163,
            5076, 2246, 1970, 1096, 2291, 5208, 5649, 5337, 2094, 4811, 6015, 4491,
            6760, 2704,   96, 4886, 3266,  779, 1392,   31, 5652, 1651, 5232,   52,
            3222, 2723,  951,  580, 1524, 2659, 5169,  355, 5004, 4419, 4413, 5318,
            2602, 6141, 2401, 2066]), tensor([6555, 1014, 4662, 7042, 5815, 7532,  499, 3354, 6875, 4971, 3039, 1090,
             650, 7111,  657, 3049, 1996, 1437, 2039, 1171,  410, 1904, 1780,  487,
            4338, 3898,  882, 6088, 3224,  969, 2354, 6644, 6301, 4915, 6361, 5695,
            6667, 4080, 2809, 6914, 2228, 6433,  902, 6998, 5204, 7043, 2481, 3474,
            1085, 5822, 1316,  834, 6309, 4076, 1360, 3110, 5048, 7426, 1199, 6246,
            4942, 7191, 6658,   28, 6183, 1382,   15, 4824, 5831,   57, 7424,   83,
            4051, 2701, 4014, 3910, 3604, 1347,  520, 3961, 6437, 4021, 4893, 4896,
            5152,  152, 1131, 7545,  237, 4315, 3203, 5594, 3872,  484,   11,  118,
            1343, 5933, 6880, 6486, 2002, 5294,  746, 5181, 4478, 5444, 6589, 2670,
            3242,  667, 2053, 2402, 4145, 5855, 3683, 2301, 3745, 7484, 2957, 4912,
            7466,  732, 1846, 2119, 2048, 2573, 1183, 3629, 7193, 6820, 3662, 2168,
            5431, 4687, 4020, 6893, 1088, 3345, 2351, 4762, 3359,  953, 2071,  772,
            1359, 6096, 4035,  543, 5491,  551, 4058, 1592, 4621, 7423, 2004, 2496,
            4572, 4580, 2799,  879, 1495, 6665, 3685,  947, 5564, 2912, 2346, 4345,
            6114, 1294, 3123, 3052, 5420, 6271, 6679, 3282, 5017, 5215, 2360, 2993,
            4764, 5683, 3335, 1213, 3750, 4280,  217,  544, 2793, 1820,  202, 4179,
            2013,  659, 4295, 5153, 5426, 5608,  128, 3135, 7563, 4894, 6189,  674,
            3195,   33, 7201, 3381, 4001, 4395, 3960, 7336, 3439, 6831, 2106,  829,
            6339, 6263, 4697, 5378, 2749, 1273, 6604, 4905, 4651, 1641, 4507, 1141,
            1707, 7396, 2967, 2916, 1122, 5243, 7448, 3094, 7381,  125, 4800, 1817,
            4335, 4403,  328, 3534,  444,  736, 3311, 3509, 2568, 5514, 7074, 3759,
            5590, 3827,  931, 2890, 7573, 1797, 6092, 3715, 2470, 3656, 6118, 1881,
            6743, 4561, 6072, 7408, 3318, 4685, 7132, 1434,  655, 2563, 1618, 6660,
            1057, 7601, 1105, 2589, 4874, 3178, 1928, 4655, 6721, 5918, 4777, 5540,
            6564, 6602, 4650, 7249,  468,  620, 5080, 5659, 2367, 1716, 6055, 2820,
            5137, 1008, 1844, 2341, 6021, 7159, 7471, 1522, 6814, 5896, 6146, 4423,
            7575, 6030, 6989, 3434,  480, 3372, 3333, 5950, 6410, 4526, 6711, 5256,
            4286, 4313, 6974, 3605, 4221, 3586,  822, 5863, 6554, 4674, 6349, 1162,
            7550, 3410, 1255, 3471, 2831, 4383, 4304, 3433, 5225, 3904, 2467, 6520,
            2976, 6865, 4231, 1087, 6645, 2897,  210,  357, 2494, 3831, 1299, 7535,
            6726, 6488,  588, 4299,  662, 3449, 2836, 2020, 6518,  258, 4774, 3082,
            1916, 1456, 1322, 6983, 3425, 7436, 2122, 1291, 3922, 6870, 7157, 7508,
            7127, 6592, 7607, 4881, 3456, 6248, 6222, 6405, 6333, 1966, 1666, 3798,
            1391, 2304, 6618, 4081, 7338, 4641, 3397, 7316, 6967, 7369, 1989,  770,
            7309, 4289, 3251, 1861, 1204, 4931,  312, 7190, 3142,  104, 1800, 3565,
            7604, 6817, 2336, 3762, 2631, 4292,   14, 2790, 4091, 1899, 4862,  541,
            5793, 3615, 3236, 4883,  851, 2187, 1917, 4624, 1060, 1449, 3911,  483,
            1903, 5600,  688, 5161, 6597, 5750, 5582, 3806, 5373, 4223, 4007, 5840,
            5103, 6000,  225, 7600,  160,  158, 5641, 5119, 1190, 6752, 3989,  504,
            4152, 2667, 3361,  678, 2381, 5627, 3489, 6473,   91, 1901, 3914, 5489,
            3167, 5694, 7384, 3589,  907,  450, 5804, 1307, 1158,  690, 2970,  442,
            3804, 4446,  799, 3748, 5263, 1747, 6156, 4910, 5934, 6177, 1503, 1533,
            7465, 3130, 4497,  928, 3143, 1210, 4101,  579,  755, 2615, 2289, 5964,
            7016, 4500, 1958, 3038,  303, 2754, 2422,  905, 3391, 6898, 3482, 1371,
             670,  890, 1866, 4191, 5872, 3146, 2086, 1787, 7078, 7070, 5902, 1744,
             249, 5049, 2843,  351, 4583, 4594, 5384, 6988, 6498, 5113, 1432,  519,
            2331, 2887, 3137, 1261, 2356, 2022, 1224, 5112,  253, 6014, 4042, 4136,
            2240,  684, 3566, 1032, 2768, 5098, 1570, 3813, 7606, 6948, 4368, 7285,
            2769, 6682, 3637,  582, 4098, 4348, 6548, 5333, 5395, 3887, 6551, 3816,
            7058, 7235, 6308,  116, 2198, 6622, 7165, 5495, 1671, 2848, 6789, 4049,
            1364,  454, 5327, 2222, 1439,  239, 2534, 2491, 6819, 5238, 7244, 7503,
            4947, 2617, 6532, 5684, 6464, 7105, 1850, 4433, 6430, 1242, 1645, 4599,
            7353,  943, 2574, 2632, 6951, 2285, 7092, 7365, 7287, 3493, 1801, 7061,
            3705, 5264, 4312, 5498, 6027, 5788, 2904, 7486, 7417, 5731, 5148, 1459,
            3550, 6700, 5067,  835, 7081, 7458, 5387, 6292, 4102, 7037, 2618, 6462,
            7572,  475, 5424, 6166, 5465, 2522, 7032, 4711, 2586,  844, 2209, 4219,
            6605, 2847, 4848,  204, 3134, 3664, 2310, 3635, 4721, 7537, 1230, 7364,
            1103,  757, 3958, 6172, 6297, 5867, 6975, 5567, 1879, 2084, 3349, 4939,
            2062,  267, 4653, 1720, 4884, 3527, 7024, 6766, 6288, 5948, 2557, 2928,
            2580, 4185, 5647, 3863, 2092, 1777, 4250, 2073, 1350, 1203, 4793, 5302,
            3378, 1169, 3932, 5030, 3840,  318, 2008, 1987, 4899, 1305, 3522, 2408,
            5505,  388, 4044, 4587, 5991, 3856,  386, 4377, 4118, 6793, 1409, 6329,
            2472, 2884, 5780, 1235, 5398, 6613, 1864, 7022, 3963,  918, 4469,  975,
               8, 3536,  185, 4575, 4768,  700, 4550, 1167, 2894, 1945, 3308, 1589,
            5713, 5297, 7556, 2624, 4565, 2343, 3666, 6987, 4695, 3230, 6362, 6886,
            4094, 4812, 3170, 5044, 3843, 3978, 3983,  400, 6158, 3965, 3080, 6137,
            6454, 1234, 7107,  219, 2025, 2118,  871, 1602, 1842, 6192, 5452, 4209,
            5604, 5997, 5060, 4038, 2479,  141,   98, 4982,  693, 2371, 3861, 3172,
            7622, 4265, 5235, 4922,  695, 1814,  830,  334, 3461, 7586, 3303, 1753,
            6476, 2718, 1358, 3234, 7278,  566, 1755, 6944, 4998, 6327, 5364, 3281,
            4738, 2450, 5833, 5532, 1858, 2108,  529, 3075, 7069, 3481, 1011, 1044,
            6123, 5163, 6398, 5891,  464, 2951, 7392, 3883, 5784, 2054, 3822, 5063,
            3033, 6098, 1501, 2115, 6536, 5607,  978, 6690, 6395,  184, 6866,   38,
            2526,   68, 1976,  221, 4110, 3993, 5180, 3386, 4055, 4409, 1710, 4956,
            7307, 4739,  507, 5807, 1974, 5848, 1529, 3744, 5095, 6931, 5810, 4977,
            7231, 1407, 4950, 1493,  150, 4656, 3118, 3205, 3713, 3253, 6725, 6688,
            1920, 1303, 1657, 2945, 6025, 2395, 5346,  123, 6714, 6821, 2258,  304,
             984, 6920, 3084, 2651, 5381, 1424, 6358, 3277, 6734, 1356, 5865, 6103,
            5612, 2533, 4009, 7332, 7345, 2165, 3120,  751, 3717, 5751,  366, 4728,
            5028, 1154, 7161, 4512, 1015, 6499, 2152, 6585, 5661, 3968, 6313, 6861,
            5053, 2246, 1954,  766, 1875, 5209, 6069, 5337, 2076, 4390, 6420, 4084,
            6389, 2278,  522, 5319, 3688,  778, 1004,  155, 5652, 1231, 5672,  181,
            2389, 2721, 1704,  337, 1129, 2238, 5170,  383, 4547, 4841, 3966, 5311,
            2177, 6141, 2400, 2508]))



.. GENERATED FROM PYTHON SOURCE LINES 167-169

Let's plot the probability map of target voxels being matched with
the 300th source voxel.

.. GENERATED FROM PYTHON SOURCE LINES 169-202

.. code-block:: default

    pi = fine_mapping.pi
    vertex_index = 300
    one_hot = np.zeros(source_features.shape[1])
    one_hot[vertex_index] = 1.0
    probability_map = fine_mapping.inverse_transform(one_hot)

    fig = plt.figure()
    ax = fig.add_subplot(projection="3d")
    ax.scatter(
        coordinates[:, 0],
        coordinates[:, 1],
        coordinates[:, 2],
        marker="o",
        c=probability_map,
        cmap="twilight",
        alpha=0.75,
    )
    ax.text(
        coordinates[vertex_index, 0],
        coordinates[vertex_index, 1],
        coordinates[vertex_index, 2] - 2,
        "x Source point",
        color="red",
    )
    ax.view_init(10, 135, 2)
    ax.set_title(
        "Probability map of target voxels\n"
        f"being matched with source point {vertex_index}"
    )
    ax.set_axis_off()
    fig.colorbar(plt.cm.ScalarMappable(cmap="twilight"), ax=ax)
    plt.show()




.. image-sg:: /auto_examples/02_volumetric_alignment/images/sphx_glr_plot_2_aligning_high_res_volumes_002.png
   :alt: Probability map of target voxels being matched with source point 300
   :srcset: /auto_examples/02_volumetric_alignment/images/sphx_glr_plot_2_aligning_high_res_volumes_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 203-204

We can now align test contrasts using the fitted fine mapping.

.. GENERATED FROM PYTHON SOURCE LINES 204-210

.. code-block:: default

    contrast_index = -1
    predicted_target_features = fine_mapping.transform(
        source_features[contrast_index, :]
    )
    predicted_target_features.shape





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (7633,)



.. GENERATED FROM PYTHON SOURCE LINES 211-212

Let's compare the Pearson correlation between source and target features.

.. GENERATED FROM PYTHON SOURCE LINES 212-226

.. code-block:: default

    corr_pre_mapping = np.corrcoef(
        source_features[contrast_index, :], target_features[contrast_index, :]
    )[0, 1]
    corr_post_mapping = np.corrcoef(
        predicted_target_features, target_features[contrast_index, :]
    )[0, 1]
    print(f"Pearson Correlation pre-mapping: {corr_pre_mapping:.2f}")
    print(f"Pearson Correlation post-mapping: {corr_post_mapping:.2f}")
    print(
        "Relative improvement:"
        f" {(corr_post_mapping - corr_pre_mapping) / corr_pre_mapping *100 :.2f} %"
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Pearson Correlation pre-mapping: 0.36
    Pearson Correlation post-mapping: 0.47
    Relative improvement: 29.65 %




.. GENERATED FROM PYTHON SOURCE LINES 227-228

Let's plot the transporting feature maps of the test set.

.. GENERATED FROM PYTHON SOURCE LINES 228-270

.. code-block:: default

    fig = plt.figure(figsize=plt.figaspect(0.3))
    fig.suptitle("Transporting feature maps of the test set", size=16)
    ax = fig.add_subplot(1, 2, 1, projection="3d")
    ax.scatter(
        coordinates[:, 0],
        coordinates[:, 1],
        coordinates[:, 2],
        marker="o",
        c=source_features_normalized[-1, :],
        cmap="twilight",
    )
    ax.view_init(10, 135, 2)
    ax.set_title("Source features")
    ax.set_axis_off()

    ax = fig.add_subplot(1, 1, 1, projection="3d")
    ax.scatter(
        coordinates[:, 0],
        coordinates[:, 1],
        coordinates[:, 2],
        marker="o",
        c=predicted_target_features,
        cmap="twilight",
    )
    ax.view_init(10, 135, 2)
    ax.set_title("Predicted target features")
    ax.set_axis_off()

    ax = fig.add_subplot(1, 2, 2, projection="3d")
    ax.scatter(
        coordinates[:, 0],
        coordinates[:, 1],
        coordinates[:, 2],
        marker="o",
        c=target_features_normalized[-1, :],
        cmap="twilight",
    )
    ax.view_init(10, 135, 2)
    ax.set_title("Actual target features")
    ax.set_axis_off()
    fig.colorbar(plt.cm.ScalarMappable(cmap="twilight"), ax=ax)
    plt.show()



.. image-sg:: /auto_examples/02_volumetric_alignment/images/sphx_glr_plot_2_aligning_high_res_volumes_003.png
   :alt: Transporting feature maps of the test set, Source features, Predicted target features, Actual target features
   :srcset: /auto_examples/02_volumetric_alignment/images/sphx_glr_plot_2_aligning_high_res_volumes_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  52.019 seconds)

**Estimated memory usage:**  713 MB


.. _sphx_glr_download_auto_examples_02_volumetric_alignment_plot_2_aligning_high_res_volumes.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_2_aligning_high_res_volumes.py <plot_2_aligning_high_res_volumes.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_2_aligning_high_res_volumes.ipynb <plot_2_aligning_high_res_volumes.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
