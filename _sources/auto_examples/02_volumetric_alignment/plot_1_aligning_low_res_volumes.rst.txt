
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_volumetric_alignment/plot_1_aligning_low_res_volumes.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_volumetric_alignment_plot_1_aligning_low_res_volumes.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_volumetric_alignment_plot_1_aligning_low_res_volumes.py:


===================================================================
Align low-resolution brain volumes of 2 individuals with fMRI data
===================================================================

In this example, we align 2 low-resolution brain volumes
using 4 fMRI feature maps (z-score contrast maps).

.. GENERATED FROM PYTHON SOURCE LINES 10-21

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt

    from nilearn import datasets, image
    from scipy.spatial import distance_matrix

    from fugw.mappings import FUGW

    plt.rcParams["figure.dpi"] = 300








.. GENERATED FROM PYTHON SOURCE LINES 23-24

We first fetch 5 contrasts for each subject from the localizer dataset.

.. GENERATED FROM PYTHON SOURCE LINES 24-47

.. code-block:: default

    n_subjects = 2

    contrasts = [
        "sentence reading vs checkerboard",
        "sentence listening",
        "calculation vs sentences",
        "left vs right button press",
        "checkerboard",
    ]
    n_training_contrasts = 4

    brain_data = datasets.fetch_localizer_contrasts(
        contrasts,
        n_subjects=n_subjects,
        get_anats=True,
    )

    source_imgs_paths = brain_data["cmaps"][0 : len(contrasts)]
    target_imgs_paths = brain_data["cmaps"][len(contrasts) : 2 * len(contrasts)]

    source_im = image.load_img(source_imgs_paths)
    target_im = image.load_img(target_imgs_paths)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/local/lib/python3.8/site-packages/nilearn/datasets/func.py:893: UserWarning:

    `legacy_format` will default to `False` in release 0.11. Dataset fetchers will then return pandas dataframes by default instead of recarrays.





.. GENERATED FROM PYTHON SOURCE LINES 48-49

We then downsample the images by 3 to reduce the computational cost.

.. GENERATED FROM PYTHON SOURCE LINES 49-78

.. code-block:: default

    SCALE_FACTOR = 3

    source_maps = np.nan_to_num(
        source_im.get_fdata()[::SCALE_FACTOR, ::SCALE_FACTOR, ::SCALE_FACTOR]
    )
    target_maps = np.nan_to_num(
        target_im.get_fdata()[::SCALE_FACTOR, ::SCALE_FACTOR, ::SCALE_FACTOR]
    )

    segmentation_fine = np.logical_not(np.isnan(source_im.get_fdata()[:, :, :, 0]))
    segmentation_coarse = segmentation_fine[
        ::SCALE_FACTOR, ::SCALE_FACTOR, ::SCALE_FACTOR
    ]
    coordinates = np.array(np.nonzero(segmentation_coarse)).T

    source_features = source_maps[
        coordinates[:, 0], coordinates[:, 1], coordinates[:, 2]
    ].T
    target_features = target_maps[
        coordinates[:, 0], coordinates[:, 1], coordinates[:, 2]
    ].T

    fig = plt.figure()
    ax = fig.add_subplot(projection="3d")
    ax.scatter(coordinates[:, 0], coordinates[:, 1], coordinates[:, 2], marker="o")
    ax.view_init(10, 135)
    ax.set_axis_off()
    plt.show()




.. image-sg:: /auto_examples/02_volumetric_alignment/images/sphx_glr_plot_1_aligning_low_res_volumes_001.png
   :alt: plot 1 aligning low res volumes
   :srcset: /auto_examples/02_volumetric_alignment/images/sphx_glr_plot_1_aligning_low_res_volumes_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 79-80

We then compute the distance matrix between voxel coordinates.

.. GENERATED FROM PYTHON SOURCE LINES 80-85

.. code-block:: default

    source_geometry = distance_matrix(coordinates, coordinates)
    target_geometry = source_geometry.copy()
    plt.imshow(source_geometry)
    plt.show()




.. image-sg:: /auto_examples/02_volumetric_alignment/images/sphx_glr_plot_1_aligning_low_res_volumes_002.png
   :alt: plot 1 aligning low res volumes
   :srcset: /auto_examples/02_volumetric_alignment/images/sphx_glr_plot_1_aligning_low_res_volumes_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 86-118

.. code-block:: default

    fig = plt.figure()
    ax = fig.add_subplot(projection="3d")
    ax.scatter(
        coordinates[1:, 0],
        coordinates[1:, 1],
        coordinates[1:, 2],
        marker=".",
        c=source_geometry[0, 1:],
    )
    ax.scatter(
        coordinates[0, 0],
        coordinates[0, 1],
        coordinates[0, 2],
        marker="o",
        c="red",
    )
    ax.text(
        coordinates[0, 0],
        coordinates[0, 1],
        coordinates[0, 2] - 2,
        "Source point",
        color="red",
    )
    ax.view_init(10, 135)
    ax.set_axis_off()
    fig.colorbar(
        plt.cm.ScalarMappable(cmap="viridis"),
        ax=ax,
        label="Distance to source point",
    )
    plt.show()




.. image-sg:: /auto_examples/02_volumetric_alignment/images/sphx_glr_plot_1_aligning_low_res_volumes_003.png
   :alt: plot 1 aligning low res volumes
   :srcset: /auto_examples/02_volumetric_alignment/images/sphx_glr_plot_1_aligning_low_res_volumes_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 119-121

In order to avoid numerical errors when fitting the mapping, we normalize
both the features and the geometry.

.. GENERATED FROM PYTHON SOURCE LINES 121-130

.. code-block:: default

    source_features_normalized = source_features / np.linalg.norm(
        source_features, axis=1
    ).reshape(-1, 1)
    target_features_normalized = target_features / np.linalg.norm(
        target_features, axis=1
    ).reshape(-1, 1)
    source_geometry_normalized = source_geometry / np.max(source_geometry)
    target_geometry_normalized = target_geometry / np.max(target_geometry)








.. GENERATED FROM PYTHON SOURCE LINES 131-132

We now fit the mapping using the sinkhorn solver and 3 BCD iterations.

.. GENERATED FROM PYTHON SOURCE LINES 132-145

.. code-block:: default

    mapping = FUGW(alpha=0.5, rho=1, eps=1e-4)
    _ = mapping.fit(
        source_features_normalized[:n_training_contrasts],
        target_features_normalized[:n_training_contrasts],
        source_geometry=source_geometry_normalized,
        target_geometry=target_geometry_normalized,
        solver="sinkhorn",
        solver_params={
            "nits_bcd": 3,
        },
        verbose=True,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none



    [18:58:05] BCD step 1/3    FUGW loss:      0.02176835760474205      dense.py:464


    [19:05:09] BCD step 2/3    FUGW loss:      0.003159747226163745     dense.py:464


    [19:12:12] BCD step 3/3    FUGW loss:      0.0030597804579883814    dense.py:464




.. GENERATED FROM PYTHON SOURCE LINES 146-148

Let's plot the probability map of target voxels being matched with
the 300th source voxel.

.. GENERATED FROM PYTHON SOURCE LINES 148-181

.. code-block:: default

    pi = mapping.pi
    vertex_index = 300
    probability_map = pi[vertex_index, :] / np.sqrt(
        np.linalg.norm(pi[vertex_index, :])
    )

    fig = plt.figure()
    ax = fig.add_subplot(projection="3d")
    ax.scatter(
        coordinates[:, 0],
        coordinates[:, 1],
        coordinates[:, 2],
        marker="o",
        c=probability_map,
        cmap="twilight",
        alpha=0.75,
    )
    ax.text(
        coordinates[vertex_index, 0],
        coordinates[vertex_index, 1],
        coordinates[vertex_index, 2] - 2,
        "Source point",
        color="red",
    )
    ax.view_init(10, 135, 2)
    ax.set_title(
        "Probability map of target voxels\n"
        f"being matched with source point {vertex_index}"
    )
    ax.set_axis_off()
    fig.colorbar(plt.cm.ScalarMappable(cmap="twilight"), ax=ax)
    plt.show()




.. image-sg:: /auto_examples/02_volumetric_alignment/images/sphx_glr_plot_1_aligning_low_res_volumes_004.png
   :alt: Probability map of target voxels being matched with source point 300
   :srcset: /auto_examples/02_volumetric_alignment/images/sphx_glr_plot_1_aligning_low_res_volumes_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 182-183

We can now align test contrasts using the fitted mapping.

.. GENERATED FROM PYTHON SOURCE LINES 183-189

.. code-block:: default

    contrast_index = -1
    predicted_target_features = mapping.transform(
        source_features[contrast_index, :]
    )
    predicted_target_features.shape





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (2258,)



.. GENERATED FROM PYTHON SOURCE LINES 190-191

Let's compare the Pearson correlation between source and target features.

.. GENERATED FROM PYTHON SOURCE LINES 191-205

.. code-block:: default

    corr_pre_mapping = np.corrcoef(
        source_features[contrast_index, :], target_features[contrast_index, :]
    )[0, 1]
    corr_post_mapping = np.corrcoef(
        predicted_target_features, target_features[contrast_index, :]
    )[0, 1]
    print(f"Pearson Correlation pre-mapping: {corr_pre_mapping:.2f}")
    print(f"Pearson Correlation post-mapping: {corr_post_mapping:.2f}")
    print(
        "Relative improvement:"
        f" {(corr_post_mapping - corr_pre_mapping) / corr_pre_mapping *100 :.2f} %"
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Pearson Correlation pre-mapping: 0.38
    Pearson Correlation post-mapping: 0.43
    Relative improvement: 12.72 %




.. GENERATED FROM PYTHON SOURCE LINES 206-207

Let's plot the transporting feature maps of the test set.

.. GENERATED FROM PYTHON SOURCE LINES 207-249

.. code-block:: default

    fig = plt.figure(figsize=plt.figaspect(0.3))
    fig.suptitle("Transporting feature maps of the test set", size=16)
    ax = fig.add_subplot(1, 2, 1, projection="3d")
    ax.scatter(
        coordinates[:, 0],
        coordinates[:, 1],
        coordinates[:, 2],
        marker="o",
        c=source_features_normalized[-1, :],
        cmap="twilight",
    )
    ax.view_init(10, 135, 2)
    ax.set_title("Source features")
    ax.set_axis_off()

    ax = fig.add_subplot(1, 1, 1, projection="3d")
    ax.scatter(
        coordinates[:, 0],
        coordinates[:, 1],
        coordinates[:, 2],
        marker="o",
        c=predicted_target_features,
        cmap="twilight",
    )
    ax.view_init(10, 135, 2)
    ax.set_title("Predicted target features")
    ax.set_axis_off()

    ax = fig.add_subplot(1, 2, 2, projection="3d")
    ax.scatter(
        coordinates[:, 0],
        coordinates[:, 1],
        coordinates[:, 2],
        marker="o",
        c=target_features_normalized[-1, :],
        cmap="twilight",
    )
    ax.view_init(10, 135, 2)
    ax.set_title("Actual target features")
    ax.set_axis_off()
    fig.colorbar(plt.cm.ScalarMappable(cmap="twilight"), ax=ax)
    plt.show()



.. image-sg:: /auto_examples/02_volumetric_alignment/images/sphx_glr_plot_1_aligning_low_res_volumes_005.png
   :alt: Transporting feature maps of the test set, Source features, Predicted target features, Actual target features
   :srcset: /auto_examples/02_volumetric_alignment/images/sphx_glr_plot_1_aligning_low_res_volumes_005.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 16 minutes  47.000 seconds)

**Estimated memory usage:**  415 MB


.. _sphx_glr_download_auto_examples_02_volumetric_alignment_plot_1_aligning_low_res_volumes.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_1_aligning_low_res_volumes.py <plot_1_aligning_low_res_volumes.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_1_aligning_low_res_volumes.ipynb <plot_1_aligning_low_res_volumes.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
